"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_map_SharedMapComponent_tsx";
exports.ids = ["components_map_SharedMapComponent_tsx"];
exports.modules = {

/***/ "./components/map/SharedMapComponent.tsx":
/*!***********************************************!*\
  !*** ./components/map/SharedMapComponent.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _context_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/AuthContext */ \"./context/AuthContext.tsx\");\n/* harmony import */ var react_leaflet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-leaflet */ \"react-leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _FilterButtons__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./FilterButtons */ \"./components/map/FilterButtons.tsx\");\n/* harmony import */ var _SearchBar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SearchBar */ \"./components/map/SearchBar.tsx\");\n/* harmony import */ var _ContextWindowPlaceholder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ContextWindowPlaceholder */ \"./components/map/ContextWindowPlaceholder.tsx\");\n/* harmony import */ var _styles_MapPage_module_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../styles/MapPage.module.css */ \"./styles/MapPage.module.css\");\n/* harmony import */ var _styles_MapPage_module_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_styles_MapPage_module_css__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var leaflet_dist_images_marker_icon_2x_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! leaflet/dist/images/marker-icon-2x.png */ \"./node_modules/leaflet/dist/images/marker-icon-2x.png\");\n/* harmony import */ var leaflet_dist_images_marker_icon_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! leaflet/dist/images/marker-icon.png */ \"./node_modules/leaflet/dist/images/marker-icon.png\");\n/* harmony import */ var leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! leaflet/dist/images/marker-shadow.png */ \"./node_modules/leaflet/dist/images/marker-shadow.png\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_leaflet__WEBPACK_IMPORTED_MODULE_3__, axios__WEBPACK_IMPORTED_MODULE_5__]);\n([react_leaflet__WEBPACK_IMPORTED_MODULE_3__, axios__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n // Added MutableRefObject\n // Import useAuth\n\n // Added Map type\n\n\n // Import the new filter buttons\n // Import the search bar\n // Import the placeholder\n // Import CSS module for styling\n// Fix for default marker icon issue\n\n\n\ndelete (leaflet__WEBPACK_IMPORTED_MODULE_4___default().Icon).Default.prototype._getIconUrl;\nleaflet__WEBPACK_IMPORTED_MODULE_4___default().Icon.Default.mergeOptions({\n    iconRetinaUrl: leaflet_dist_images_marker_icon_2x_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"].src,\n    iconUrl: leaflet_dist_images_marker_icon_png__WEBPACK_IMPORTED_MODULE_12__[\"default\"].src,\n    shadowUrl: leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_13__[\"default\"].src\n});\n// --- Helper Functions (Keep existing getIconForSource) ---\nfunction getIconForSource(source) {\n    return new (leaflet__WEBPACK_IMPORTED_MODULE_4___default().Icon)({\n        iconUrl: leaflet_dist_images_marker_icon_png__WEBPACK_IMPORTED_MODULE_12__[\"default\"].src,\n        iconRetinaUrl: leaflet_dist_images_marker_icon_2x_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"].src,\n        shadowUrl: leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_13__[\"default\"].src,\n        iconSize: [\n            25,\n            41\n        ],\n        iconAnchor: [\n            12,\n            41\n        ],\n        popupAnchor: [\n            1,\n            -34\n        ],\n        shadowSize: [\n            41,\n            41\n        ]\n    });\n}\n// --- Component ---\nconst defaultCenter = [\n    51.505,\n    -0.09\n];\nconst defaultZoom = 13;\nconst SharedMapComponent = ({ tileLayerInfo, mapRef })=>{\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [footprints, setFootprints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const { isGuest } = (0,_context_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth)(); // Get guest status\n    const guestViewportKey = \"guestMapViewport\"; // Key for center/zoom\n    const guestStyleKey = \"guestMapStyleId\"; // Key for style ID\n    // Effect to load map VIEWPORT state for guests from sessionStorage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isGuest && mapRef.current) {\n            const savedViewportRaw = sessionStorage.getItem(guestViewportKey);\n            if (savedViewportRaw) {\n                try {\n                    const savedViewport = JSON.parse(savedViewportRaw);\n                    if (savedViewport.center && savedViewport.zoom) {\n                        mapRef.current.setView(savedViewport.center, savedViewport.zoom);\n                        logger.debug(\"Restored guest map viewport from sessionStorage:\", savedViewport);\n                    }\n                // Style is loaded elsewhere (e.g., LayersMenu or parent page)\n                } catch (e) {\n                    logger.error(\"Failed to parse guest map viewport from sessionStorage\", e);\n                    sessionStorage.removeItem(guestViewportKey); // Clear corrupted data\n                }\n            }\n        }\n    // Dependency array includes mapRef.current to re-run if the map initializes later,\n    // and isGuest to run when guest status is confirmed.\n    }, [\n        isGuest,\n        mapRef.current\n    ]);\n    // Effect to save map VIEWPORT state for guests to sessionStorage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const map = mapRef.current;\n        if (isGuest && map) {\n            const saveViewportState = ()=>{\n                const center = map.getCenter();\n                const zoom = map.getZoom();\n                const viewportToSave = {\n                    center: {\n                        lat: center.lat,\n                        lng: center.lng\n                    },\n                    zoom: zoom\n                };\n                try {\n                    sessionStorage.setItem(guestViewportKey, JSON.stringify(viewportToSave));\n                    logger.debug(\"Saved guest map viewport to sessionStorage:\", viewportToSave);\n                } catch (e) {\n                    logger.error(\"Failed to save guest map viewport to sessionStorage\", e);\n                }\n            };\n            map.on(\"moveend\", saveViewportState);\n            map.on(\"zoomend\", saveViewportState);\n            // Cleanup listeners\n            return ()=>{\n                map.off(\"moveend\", saveViewportState);\n                map.off(\"zoomend\", saveViewportState);\n            };\n        } else if (!isGuest) {\n            // If user logs in, clear guest state\n            sessionStorage.removeItem(guestViewportKey);\n            sessionStorage.removeItem(guestStyleKey); // Also clear style key\n        }\n    // Dependencies: Run when guest status changes or map instance is ready\n    }, [\n        isGuest,\n        mapRef.current\n    ]);\n    // Effect to save map STYLE state for guests to sessionStorage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Only save if guest and tileLayerInfo.id is valid\n        if (isGuest && tileLayerInfo?.id) {\n            try {\n                sessionStorage.setItem(guestStyleKey, tileLayerInfo.id);\n                logger.debug(\"Saved guest map style ID to sessionStorage:\", tileLayerInfo.id);\n            } catch (e) {\n                logger.error(\"Failed to save guest map style ID to sessionStorage\", e);\n            }\n        }\n    // Dependencies: Run when guest status changes or the tileLayerInfo prop changes\n    }, [\n        isGuest,\n        tileLayerInfo\n    ]);\n    // Data fetching logic (Keep existing useEffect)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchMapData = async ()=>{\n            setIsLoading(true);\n            setError(null);\n            setMarkers([]);\n            setFootprints([]);\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"/api/mapdata\");\n                // Process Markers\n                if (response.data?.markers) {\n                    const fetchedMarkers = response.data.markers.map((m)=>({\n                            id: m.id,\n                            position: m.position,\n                            popupContent: m.popupContent,\n                            source: m.source\n                        }));\n                    setMarkers(fetchedMarkers);\n                    logger.debug(`Successfully fetched ${fetchedMarkers.length} markers.`);\n                } else {\n                    logger.warn(\"No marker data found in response.\");\n                    setMarkers([]);\n                }\n                // Process Footprints\n                if (response.data?.footprints) {\n                    const fetchedFootprints = response.data.footprints.filter((f)=>f.type === \"Feature\" && f.geometry?.type === \"Polygon\" && Array.isArray(f.geometry.coordinates));\n                    setFootprints(fetchedFootprints);\n                    logger.debug(`Successfully fetched ${fetchedFootprints.length} footprints.`);\n                } else {\n                    logger.warn(\"No footprint data found in response.\");\n                    setFootprints([]);\n                }\n                if (!response.data?.markers && !response.data?.footprints) {\n                    // Keep this check, but maybe soften the error if one type exists but not the other\n                    logger.warn(\"No marker or footprint data found in response.\");\n                // throw new Error(\"Invalid or empty data format received from /api/mapdata\");\n                }\n            } catch (err) {\n                logger.error(\"Failed to fetch map data:\", err);\n                setError(err.message || \"Could not load map data.\");\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        fetchMapData();\n    }, []);\n    // REMOVED: Internal theme state (isDarkMode) and toggle button\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            flexGrow: 1,\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\"\n        },\n        children: [\n             false && /*#__PURE__*/ 0,\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: (_styles_MapPage_module_css__WEBPACK_IMPORTED_MODULE_10___default().mapControlsOverlay),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_FilterButtons__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {}, void 0, false, {\n                        fileName: \"F:\\\\Selkie\\\\Project\\\\frontend\\\\components\\\\map\\\\SharedMapComponent.tsx\",\n                        lineNumber: 262,\n                        columnNumber: 17\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_SearchBar__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                        fileName: \"F:\\\\Selkie\\\\Project\\\\frontend\\\\components\\\\map\\\\SharedMapComponent.tsx\",\n                        lineNumber: 263,\n                        columnNumber: 17\n                    }, undefined),\n                    \" \",\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ContextWindowPlaceholder__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {}, void 0, false, {\n                        fileName: \"F:\\\\Selkie\\\\Project\\\\frontend\\\\components\\\\map\\\\SharedMapComponent.tsx\",\n                        lineNumber: 264,\n                        columnNumber: 17\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"F:\\\\Selkie\\\\Project\\\\frontend\\\\components\\\\map\\\\SharedMapComponent.tsx\",\n                lineNumber: 261,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"F:\\\\Selkie\\\\Project\\\\frontend\\\\components\\\\map\\\\SharedMapComponent.tsx\",\n        lineNumber: 208,\n        columnNumber: 9\n    }, undefined);\n};\n// Keep logger instance\nconst logger = {\n    error: (...args)=>console.error(...args),\n    debug: (...args)=>console.log(...args),\n    warn: (...args)=>console.warn(...args)\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SharedMapComponent);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map/SharedMapComponent.tsx\n");

/***/ })

};
;