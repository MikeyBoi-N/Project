"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_map_SharedMapComponent_tsx";
exports.ids = ["components_map_SharedMapComponent_tsx"];
exports.modules = {

/***/ "./components/map/SharedMapComponent.tsx":
/*!***********************************************!*\
  !*** ./components/map/SharedMapComponent.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_leaflet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-leaflet */ \"react-leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var leaflet_dist_images_marker_icon_2x_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! leaflet/dist/images/marker-icon-2x.png */ \"./node_modules/leaflet/dist/images/marker-icon-2x.png\");\n/* harmony import */ var leaflet_dist_images_marker_icon_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! leaflet/dist/images/marker-icon.png */ \"./node_modules/leaflet/dist/images/marker-icon.png\");\n/* harmony import */ var leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! leaflet/dist/images/marker-shadow.png */ \"./node_modules/leaflet/dist/images/marker-shadow.png\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_leaflet__WEBPACK_IMPORTED_MODULE_2__, axios__WEBPACK_IMPORTED_MODULE_4__]);\n([react_leaflet__WEBPACK_IMPORTED_MODULE_2__, axios__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n // Added Polygon\n\n // Import axios for API calls\n // Import Leaflet CSS\n// Fix for default marker icon issue with webpack/Next.js\n// (See: https://github.com/PaulLeCam/react-leaflet/issues/808)\n\n\n\n// Explicitly set the default icon paths\ndelete (leaflet__WEBPACK_IMPORTED_MODULE_3___default().Icon).Default.prototype._getIconUrl; // Type assertion needed\nleaflet__WEBPACK_IMPORTED_MODULE_3___default().Icon.Default.mergeOptions({\n    iconRetinaUrl: leaflet_dist_images_marker_icon_2x_png__WEBPACK_IMPORTED_MODULE_6__[\"default\"].src,\n    iconUrl: leaflet_dist_images_marker_icon_png__WEBPACK_IMPORTED_MODULE_7__[\"default\"].src,\n    shadowUrl: leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_8__[\"default\"].src\n});\n// Function to get a specific icon based on the source\n// TODO: Define custom icons for different sources (Kappa, Djinn, Ghost, etc.)\nfunction getIconForSource(source) {\n    // Example: Return different icons based on source\n    // if (source === 'djinn') return djinnIcon;\n    // if (source === 'kappa') return kappaIcon;\n    // For now, return the default icon for all sources\n    // Create a new Icon instance with explicit options to satisfy TypeScript\n    return new (leaflet__WEBPACK_IMPORTED_MODULE_3___default().Icon)({\n        iconUrl: leaflet_dist_images_marker_icon_png__WEBPACK_IMPORTED_MODULE_7__[\"default\"].src,\n        iconRetinaUrl: leaflet_dist_images_marker_icon_2x_png__WEBPACK_IMPORTED_MODULE_6__[\"default\"].src,\n        shadowUrl: leaflet_dist_images_marker_shadow_png__WEBPACK_IMPORTED_MODULE_8__[\"default\"].src,\n        iconSize: [\n            25,\n            41\n        ],\n        iconAnchor: [\n            12,\n            41\n        ],\n        popupAnchor: [\n            1,\n            -34\n        ],\n        shadowSize: [\n            41,\n            41\n        ] // Default shadow size\n    });\n}\n// Example initial center and zoom\nconst defaultCenter = [\n    51.505,\n    -0.09\n]; // London coordinates\nconst defaultZoom = 13;\nconst SharedMapComponent = ()=>{\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [footprints, setFootprints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]); // State for footprints\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // TODO: Implement data fetching logic\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchMapData = async ()=>{\n            setIsLoading(true);\n            setError(null);\n            setMarkers([]); // Clear previous markers\n            setFootprints([]); // Clear previous footprints\n            try {\n                // Fetch data from the backend API endpoint\n                // Assuming Next.js proxy routes /api/* to the backend (e.g., localhost:8000)\n                const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(\"/api/mapdata\"); // Use relative path for proxy\n                // Process Markers\n                if (response.data?.markers) {\n                    const fetchedMarkers = response.data.markers.map((m)=>({\n                            id: m.id,\n                            position: m.position,\n                            popupContent: m.popupContent,\n                            source: m.source\n                        }));\n                    setMarkers(fetchedMarkers);\n                    logger.debug(`Successfully fetched ${fetchedMarkers.length} markers.`);\n                } else {\n                    logger.warn(\"No marker data found in response.\");\n                    setMarkers([]); // Ensure markers are cleared if none are fetched\n                }\n                // Process Footprints\n                if (response.data?.footprints) {\n                    // Basic validation - could be more robust\n                    const fetchedFootprints = response.data.footprints.filter((f)=>f.type === \"Feature\" && f.geometry?.type === \"Polygon\" && Array.isArray(f.geometry.coordinates));\n                    setFootprints(fetchedFootprints);\n                    logger.debug(`Successfully fetched ${fetchedFootprints.length} footprints.`);\n                } else {\n                    logger.warn(\"No footprint data found in response.\");\n                    setFootprints([]); // Ensure footprints are cleared if none are fetched\n                }\n                if (!response.data?.markers && !response.data?.footprints) {\n                    throw new Error(\"Invalid or empty data format received from /api/mapdata\");\n                }\n            } catch (err) {\n                logger.error(\"Failed to fetch map data:\", err);\n                setError(err.message || \"Could not load map data.\");\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        fetchMapData();\n    }, []); // Empty dependency array means this runs once on mount\n    // Note: MapContainer needs a defined height/width via CSS to be visible.\n    // Ensure the parent container or a CSS rule provides this.\n    // Example: style={{ height: '500px', width: '100%' }}\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            height: \"600px\",\n            width: \"100%\",\n            border: \"1px solid #ccc\"\n        },\n        children:  false && /*#__PURE__*/ 0\n    }, void 0, false, {\n        fileName: \"F:\\\\Selkie\\\\Project\\\\frontend\\\\components\\\\map\\\\SharedMapComponent.tsx\",\n        lineNumber: 136,\n        columnNumber: 9\n    }, undefined);\n};\n// Add logger instance if needed\nconst logger = {\n    error: (...args)=>console.error(...args),\n    debug: (...args)=>console.log(...args),\n    warn: (...args)=>console.warn(...args)\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SharedMapComponent);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map/SharedMapComponent.tsx\n");

/***/ })

};
;